// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	event "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/event"
	core "github.com/flyteorg/flyteplugins/go/tasks/pluginmachinery/core"

	mock "github.com/stretchr/testify/mock"
)

// TaskResourceManager is an autogenerated mock type for the TaskResourceManager type
type TaskResourceManager struct {
	mock.Mock
}

type TaskResourceManager_AllocateResource struct {
	*mock.Call
}

func (_m TaskResourceManager_AllocateResource) Return(_a0 core.AllocationStatus, _a1 error) *TaskResourceManager_AllocateResource {
	return &TaskResourceManager_AllocateResource{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *TaskResourceManager) OnAllocateResource(ctx context.Context, namespace core.ResourceNamespace, allocationToken string, constraintsSpec core.ResourceConstraintsSpec) *TaskResourceManager_AllocateResource {
	c := _m.On("AllocateResource", ctx, namespace, allocationToken, constraintsSpec)
	return &TaskResourceManager_AllocateResource{Call: c}
}

func (_m *TaskResourceManager) OnAllocateResourceMatch(matchers ...interface{}) *TaskResourceManager_AllocateResource {
	c := _m.On("AllocateResource", matchers...)
	return &TaskResourceManager_AllocateResource{Call: c}
}

// AllocateResource provides a mock function with given fields: ctx, namespace, allocationToken, constraintsSpec
func (_m *TaskResourceManager) AllocateResource(ctx context.Context, namespace core.ResourceNamespace, allocationToken string, constraintsSpec core.ResourceConstraintsSpec) (core.AllocationStatus, error) {
	ret := _m.Called(ctx, namespace, allocationToken, constraintsSpec)

	var r0 core.AllocationStatus
	if rf, ok := ret.Get(0).(func(context.Context, core.ResourceNamespace, string, core.ResourceConstraintsSpec) core.AllocationStatus); ok {
		r0 = rf(ctx, namespace, allocationToken, constraintsSpec)
	} else {
		r0 = ret.Get(0).(core.AllocationStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, core.ResourceNamespace, string, core.ResourceConstraintsSpec) error); ok {
		r1 = rf(ctx, namespace, allocationToken, constraintsSpec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type TaskResourceManager_GetID struct {
	*mock.Call
}

func (_m TaskResourceManager_GetID) Return(_a0 string) *TaskResourceManager_GetID {
	return &TaskResourceManager_GetID{Call: _m.Call.Return(_a0)}
}

func (_m *TaskResourceManager) OnGetID() *TaskResourceManager_GetID {
	c := _m.On("GetID")
	return &TaskResourceManager_GetID{Call: c}
}

func (_m *TaskResourceManager) OnGetIDMatch(matchers ...interface{}) *TaskResourceManager_GetID {
	c := _m.On("GetID", matchers...)
	return &TaskResourceManager_GetID{Call: c}
}

// GetID provides a mock function with given fields:
func (_m *TaskResourceManager) GetID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type TaskResourceManager_GetResourcePoolInfo struct {
	*mock.Call
}

func (_m TaskResourceManager_GetResourcePoolInfo) Return(_a0 []*event.ResourcePoolInfo) *TaskResourceManager_GetResourcePoolInfo {
	return &TaskResourceManager_GetResourcePoolInfo{Call: _m.Call.Return(_a0)}
}

func (_m *TaskResourceManager) OnGetResourcePoolInfo() *TaskResourceManager_GetResourcePoolInfo {
	c := _m.On("GetResourcePoolInfo")
	return &TaskResourceManager_GetResourcePoolInfo{Call: c}
}

func (_m *TaskResourceManager) OnGetResourcePoolInfoMatch(matchers ...interface{}) *TaskResourceManager_GetResourcePoolInfo {
	c := _m.On("GetResourcePoolInfo", matchers...)
	return &TaskResourceManager_GetResourcePoolInfo{Call: c}
}

// GetResourcePoolInfo provides a mock function with given fields:
func (_m *TaskResourceManager) GetResourcePoolInfo() []*event.ResourcePoolInfo {
	ret := _m.Called()

	var r0 []*event.ResourcePoolInfo
	if rf, ok := ret.Get(0).(func() []*event.ResourcePoolInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*event.ResourcePoolInfo)
		}
	}

	return r0
}

type TaskResourceManager_ReleaseResource struct {
	*mock.Call
}

func (_m TaskResourceManager_ReleaseResource) Return(_a0 error) *TaskResourceManager_ReleaseResource {
	return &TaskResourceManager_ReleaseResource{Call: _m.Call.Return(_a0)}
}

func (_m *TaskResourceManager) OnReleaseResource(ctx context.Context, namespace core.ResourceNamespace, allocationToken string) *TaskResourceManager_ReleaseResource {
	c := _m.On("ReleaseResource", ctx, namespace, allocationToken)
	return &TaskResourceManager_ReleaseResource{Call: c}
}

func (_m *TaskResourceManager) OnReleaseResourceMatch(matchers ...interface{}) *TaskResourceManager_ReleaseResource {
	c := _m.On("ReleaseResource", matchers...)
	return &TaskResourceManager_ReleaseResource{Call: c}
}

// ReleaseResource provides a mock function with given fields: ctx, namespace, allocationToken
func (_m *TaskResourceManager) ReleaseResource(ctx context.Context, namespace core.ResourceNamespace, allocationToken string) error {
	ret := _m.Called(ctx, namespace, allocationToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.ResourceNamespace, string) error); ok {
		r0 = rf(ctx, namespace, allocationToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
