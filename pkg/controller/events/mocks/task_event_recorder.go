// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	event "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/event"

	mock "github.com/stretchr/testify/mock"
)

// TaskEventRecorder is an autogenerated mock type for the TaskEventRecorder type
type TaskEventRecorder struct {
	mock.Mock
}

type TaskEventRecorder_RecordTaskEvent struct {
	*mock.Call
}

func (_m TaskEventRecorder_RecordTaskEvent) Return(_a0 error) *TaskEventRecorder_RecordTaskEvent {
	return &TaskEventRecorder_RecordTaskEvent{Call: _m.Call.Return(_a0)}
}

func (_m *TaskEventRecorder) OnRecordTaskEvent(ctx context.Context, ev *event.TaskExecutionEvent, outputPolicy string) *TaskEventRecorder_RecordTaskEvent {
	c := _m.On("RecordTaskEvent", ctx, ev, outputPolicy)
	return &TaskEventRecorder_RecordTaskEvent{Call: c}
}

func (_m *TaskEventRecorder) OnRecordTaskEventMatch(matchers ...interface{}) *TaskEventRecorder_RecordTaskEvent {
	c := _m.On("RecordTaskEvent", matchers...)
	return &TaskEventRecorder_RecordTaskEvent{Call: c}
}

// RecordTaskEvent provides a mock function with given fields: ctx, ev, outputPolicy
func (_m *TaskEventRecorder) RecordTaskEvent(ctx context.Context, ev *event.TaskExecutionEvent, outputPolicy string) error {
	ret := _m.Called(ctx, ev, outputPolicy)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *event.TaskExecutionEvent, string) error); ok {
		r0 = rf(ctx, ev, outputPolicy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
