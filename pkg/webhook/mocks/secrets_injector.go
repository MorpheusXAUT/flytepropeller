// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core"
	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"
)

// SecretsInjector is an autogenerated mock type for the SecretsInjector type
type SecretsInjector struct {
	mock.Mock
}

type SecretsInjector_ID struct {
	*mock.Call
}

func (_m SecretsInjector_ID) Return(_a0 string) *SecretsInjector_ID {
	return &SecretsInjector_ID{Call: _m.Call.Return(_a0)}
}

func (_m *SecretsInjector) OnID() *SecretsInjector_ID {
	c := _m.On("ID")
	return &SecretsInjector_ID{Call: c}
}

func (_m *SecretsInjector) OnIDMatch(matchers ...interface{}) *SecretsInjector_ID {
	c := _m.On("ID", matchers...)
	return &SecretsInjector_ID{Call: c}
}

// ID provides a mock function with given fields:
func (_m *SecretsInjector) ID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type SecretsInjector_Inject struct {
	*mock.Call
}

func (_m SecretsInjector_Inject) Return(newP *v1.Pod, injected bool, err error) *SecretsInjector_Inject {
	return &SecretsInjector_Inject{Call: _m.Call.Return(newP, injected, err)}
}

func (_m *SecretsInjector) OnInject(ctx context.Context, secrets *core.Secret, p *v1.Pod) *SecretsInjector_Inject {
	c := _m.On("Inject", ctx, secrets, p)
	return &SecretsInjector_Inject{Call: c}
}

func (_m *SecretsInjector) OnInjectMatch(matchers ...interface{}) *SecretsInjector_Inject {
	c := _m.On("Inject", matchers...)
	return &SecretsInjector_Inject{Call: c}
}

// Inject provides a mock function with given fields: ctx, secrets, p
func (_m *SecretsInjector) Inject(ctx context.Context, secrets *core.Secret, p *v1.Pod) (*v1.Pod, bool, error) {
	ret := _m.Called(ctx, secrets, p)

	var r0 *v1.Pod
	if rf, ok := ret.Get(0).(func(context.Context, *core.Secret, *v1.Pod) *v1.Pod); ok {
		r0 = rf(ctx, secrets, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Pod)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(context.Context, *core.Secret, *v1.Pod) bool); ok {
		r1 = rf(ctx, secrets, p)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *core.Secret, *v1.Pod) error); ok {
		r2 = rf(ctx, secrets, p)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
